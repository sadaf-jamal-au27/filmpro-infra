name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: us-east-1
  TF_VAR_instance_type: t3.small

# Required for OIDC authentication
permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

jobs:
  terraform-checks:
    name: Terraform Validation and Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Setup Python for Security Scan
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov Security Scan
      id: checkov
      run: |
        checkov -d . --framework terraform --output cli --soft-fail --quiet --skip-download
      continue-on-error: true

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Security Scan üîí\`${{ steps.checkov.outcome }}\`
          
          <details><summary>Show Terraform Validation</summary>
          
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: terraform-plan-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('plan_output.txt', 'utf8');
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${plan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.jenkins_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: staging-deploy-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
        echo "## Terraform Plan - Staging" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`terraform" >> $GITHUB_STEP_SUMMARY
        cat plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve tfplan
        echo "jenkins_url=http://$(terraform output -raw publicip):8080" >> $GITHUB_OUTPUT

    - name: Verify Deployment
      run: |
        echo "Staging deployment completed"
        echo "Jenkins URL: http://$(terraform output -raw publicip):8080"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.jenkins_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: production-deploy-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
        echo "## Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`terraform" >> $GITHUB_STEP_SUMMARY
        cat plan_output.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve tfplan
        echo "jenkins_url=http://$(terraform output -raw publicip):8080" >> $GITHUB_OUTPUT

    - name: Verify Deployment
      run: |
        echo "Production deployment completed"
        echo "Jenkins URL: http://$(terraform output -raw publicip):8080"

    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          üöÄ **Automated Production Release**
          
          **Infrastructure Changes:**
          - Jenkins server deployed to production
          - Jenkins URL: ${{ steps.deploy.outputs.jenkins_url }}
          
          **Deployment Details:**
          - Commit: ${{ github.sha }}
          - Triggered by: @${{ github.actor }}
          - Workflow: ${{ github.workflow }}
          
          **Next Steps:**
          1. Verify Jenkins is accessible at the URL above
          2. Complete Jenkins initial setup if this is a fresh deployment
          3. Configure Jenkins jobs and security settings
        draft: false
        prerelease: false

  cleanup-post-deploy:
    name: Post-Deployment Cleanup
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: cleanup-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Clean Terraform Files
      run: |
        echo "üßπ Cleaning up temporary Terraform files..."
        rm -f terraform.tfplan
        rm -f plan_output.txt
        echo "‚úÖ Temporary files cleaned"

    - name: Verify Infrastructure Health
      id: health_check
      run: |
        echo "üè• Performing post-deployment health checks..."
        
        # Initialize Terraform to get outputs
        terraform init
        
        # Get the Jenkins URL
        JENKINS_URL="http://$(terraform output -raw publicip):8080"
        echo "jenkins_url=$JENKINS_URL" >> $GITHUB_OUTPUT
        
        # Wait for Jenkins to be ready (max 5 minutes)
        echo "‚è≥ Waiting for Jenkins to be ready..."
        timeout 300 bash -c "
          while true; do
            if curl -s --connect-timeout 10 '$JENKINS_URL' >/dev/null 2>&1; then
              echo '‚úÖ Jenkins is responding'
              break
            fi
            echo 'Waiting for Jenkins...'
            sleep 30
          done
        " || echo "‚ö†Ô∏è Jenkins health check timed out (this is normal for first deployment)"

    - name: Update GitHub Environment
      uses: actions/github-script@v7
      with:
        script: |
          const jenkinsUrl = '${{ steps.health_check.outputs.jenkins_url }}';
          
          // Update the production environment URL
          try {
            await github.rest.repos.createOrUpdateEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: 'production',
              deployment_branch_policy: {
                protected_branches: true,
                custom_branch_policies: false
              }
            });
            
            console.log('‚úÖ Production environment updated');
            console.log(`üîó Jenkins URL: ${jenkinsUrl}`);
          } catch (error) {
            console.log('‚ÑπÔ∏è Environment update skipped:', error.message);
          }

    - name: Security Scan Post-Deploy
      run: |
        echo "üîí Running post-deployment security checks..."
        
        # Check security group rules
        terraform init
        SG_ID=$(terraform output -raw security_group_id 2>/dev/null || echo "")
        
        if [ -n "$SG_ID" ]; then
          echo "Checking security group: $SG_ID"
          aws ec2 describe-security-groups --group-ids "$SG_ID" \
            --query 'SecurityGroups[0].IpPermissions[?FromPort==`8080`]' \
            --output table
        fi
        
        echo "‚úÖ Security scan completed"

    - name: Cleanup Summary
      run: |
        echo "## üéâ Deployment & Cleanup Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Jenkins server provisioned" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Security configurations verified" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Post-deployment cleanup completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Access Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Jenkins URL**: ${{ steps.health_check.outputs.jenkins_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Connection**: Use AWS SSM Session Manager" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Access Jenkins at the URL above" >> $GITHUB_STEP_SUMMARY
        echo "2. Complete Jenkins initial setup wizard" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure Jenkins security and plugins" >> $GITHUB_STEP_SUMMARY
        echo "4. Set up your CI/CD jobs in Jenkins" >> $GITHUB_STEP_SUMMARY
