name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: us-east-1
  TF_VAR_instance_type: t3.small

# Required for OIDC authentication
permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

jobs:
  terraform-checks:
    name: Terraform Validation and Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Setup Python for Security Scan
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov Security Scan
      id: checkov
      run: |
        checkov -d . --framework terraform --output cli --soft-fail --quiet --skip-download
      continue-on-error: true

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Security Scan üîí\`${{ steps.checkov.outcome }}\`
          
          <details><summary>Show Terraform Validation</summary>
          
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: terraform-plan-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('plan_output.txt', 'utf8');
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${plan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.jenkins_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: staging-deploy-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve
        echo "jenkins_url=http://$(terraform output -raw publicip):8080" >> $GITHUB_OUTPUT

    - name: Verify Deployment
      run: |
        echo "Staging deployment completed"
        echo "Jenkins URL: http://$(terraform output -raw publicip):8080"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.jenkins_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: production-deploy-session
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-credentials: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: terraform plan

    - name: Terraform Apply
      id: deploy
      run: |
        terraform apply -auto-approve
        echo "jenkins_url=http://$(terraform output -raw publicip):8080" >> $GITHUB_OUTPUT

    - name: Verify Deployment
      run: |
        echo "Production deployment completed"
        echo "Jenkins URL: http://$(terraform output -raw publicip):8080"

    - name: Create Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          üöÄ **Automated Production Release**
          
          **Infrastructure Changes:**
          - Jenkins server deployed to production
          - Jenkins URL: ${{ steps.deploy.outputs.jenkins_url }}
          
          **Deployment Details:**
          - Commit: ${{ github.sha }}
          - Triggered by: @${{ github.actor }}
          - Workflow: ${{ github.workflow }}
          
          **Next Steps:**
          1. Verify Jenkins is accessible at the URL above
          2. Complete Jenkins initial setup if this is a fresh deployment
          3. Configure Jenkins jobs and security settings
        draft: false
        prerelease: false
